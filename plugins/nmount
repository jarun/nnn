#!/usr/bin/env sh

# Description: Toggle mount status of a device using pmount/udevil
#              If the device is not mounted, it will be mounted.
#              If the device is mounted, it will be unmounted and powered down.
#
# Dependencies: lsblk, pmount/udevil, udisks2
#
# Notes:
#   - The script uses Linux-specific lsblk to list block devices. Alternatives:
#       macOS: "diskutil list"
#       BSD: "geom disk list"
#   - The script uses udisksctl (from udisks2) to power down devices. This is also Linux-specific.
#     Users on non-Linux platforms can comment it and use an alterntive to power-down disks.
#
# Shell: POSIX compliant
# Author: Arun Prakash Jana

prompt="device name [eg. sdXn]: "
inst_prompt () {
  printf "\nEnsure you aren't still in the mounted device.\n"
  printf "âž¤ 'l': list, 'q': quit\n"
  printf "%s" "$prompt"
  read -r dev
}

handle_mount () {
  if type pmount >/dev/null 2>&1; then
    pmount "$1"
  elif type udevil >/dev/null 2>&1; then
    udevil mount "$1"
  else
    exit 0
  fi
}

handle_umount () {
  if type pmount >/dev/null 2>&1; then
    pmount "$1"
  elif type udevil >/dev/null 2>&1; then
    udevil umount "$1"
  else
    exit 0
  fi
}

lsblk
inst_prompt

while [ -n "$dev" ]
do
    if [ "$dev" = "l" ]; then
        lsblk
    elif [ "$dev" = "q" ]; then
        exit
    else
        TO_MOUNT="/dev/$dev"
        if grep -qs "$dev " /proc/mounts; then
            sync
            if handle_umount "$TO_MOUNT"
            then
                echo "$dev" unmounted.
                if udisksctl power-off -b "$TO_MOUNT"
                then
                    echo "$dev" ejected.
                fi
            fi
        else
            if handle_mount "$TO_MOUNT"
            then
              echo "$dev" mounted to "$(lsblk -n "$TO_MOUNT" | rev | cut -d' ' -f1 | rev)".
            fi
        fi
    fi

    echo
    inst_prompt
done

